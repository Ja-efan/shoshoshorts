# 운영 환경 설정
spring.config.activate.on-profile=prod
api.password=${API_PASSWORD}

# PostgreSQL 설정
spring.datasource.url=jdbc:postgresql://sss-postgres:5432/${POSTGRES_DB}
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}

# MongoDB 설정 (운영 환경)
spring.data.mongodb.database=${MONGO_DB}
spring.data.mongodb.uri=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@sss-mongo:${MONGO_PORT}/${MONGO_DB}?authSource=admin

# JPA 설정
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false

# 로깅 설정
logging.level.root=WARN
logging.level.com.sss.backend=INFO

# Swagger 설정
springdoc.api-docs.enabled=false
springdoc.swagger-ui.enabled=false

# AWS 자격증명
aws.accessKey=${AWS_ACCESS_KEY}
aws.secretKey=${AWS_SECRET_KEY}

# FFmpeg 경로
ffmpeg.path=${FFMPEG_PATH}

# 임시 파일 저장 경로
temp.directory=${TEMP_DIRECTORY}

# 서버 설정
server.tomcat.max-threads=200
server.tomcat.min-spare-threads=20


# Naver_registration .env? ??
spring.security.oauth2.client.registration.naver.client-name=naver

spring.security.oauth2.client.registration.naver.client-id=${NAVER_CLIENT_ID}
spring.security.oauth2.client.registration.naver.client-secret=${NAVER_CLIENT_SECRET}
# ?? ??? ???
spring.security.oauth2.client.registration.naver.redirect-uri=http://shoshoshorts.duckdns.org/api/login/oauth2/code/naver
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=name,email

#provider (??? spring Oauth ???? ????)
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# Google registration
spring.security.oauth2.client.registration.google.client-name=google

spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
# ??? ????
spring.security.oauth2.client.registration.google.redirect-uri=http://shoshoshorts.duckdns.org/api/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.scope=profile,email,https://www.googleapis.com/auth/youtube.upload

#Youtube api ??
youtube.application.name=shoshoshorts

# JWT ??? ?
spring.jwt.secret=hi123im456geunhwi789kimssssssssssssssssssssssssssssaa


# Redirect URI
oauth2.redirect.google=http://shoshoshorts.duckdns.org/auth/google/callback
oauth2.redirect.naver=http://shoshoshorts.duckdns.org/auth/naver/callback
oauth2.redirect.kakao=http://shoshoshorts.duckdns.org/auth/kakao/callback